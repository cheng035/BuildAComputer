(Sys.init)   //[function, Sys.init, 0]
@0
D=A
@4   //[push, constant, 4]
D=A
@SP
A=M
M=D
@SP
M=M+1
@Main.fibonacci$ret.0   //[call, Main.fibonacci, 1]
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.fibonacci
0;JMP
(Main.fibonacci$ret.0)
(Sys.init$WHILE)   //[label, WHILE]
@Sys.init$WHILE   //[goto, WHILE]
0;JMP
(END)   //[function, Main.fibonacci, 0]
@END
0;JMP
(Main.fibonacci)
@0
D=A
@0   //[push, argument, 0]
D=A
@ARG
A=M
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
@2   //[push, constant, 2]
D=A
@SP
A=M
M=D
@SP
M=M+1
@SP   //[lt]
A=M
A=A-1
D=M
@SP
M=M-1
@SP
A=M
A=A-1
D=M-D
@EQUAL0
D;JLT
@SP
A=M
A=A-1
M=0
@END0
0;JMP
(EQUAL0)
@SP
A=M
A=A-1
M=-1
(END0)
@SP   //[if-goto, IF_TRUE]
A=M
A=A-1
D=M
@SP
M=M-1
@Main.fibonacci$IF_TRUE
D;JNE
@Main.fibonacci$IF_FALSE   //[goto, IF_FALSE]
0;JMP
(Main.fibonacci$IF_TRUE)   //[label, IF_TRUE]
@0   //[push, argument, 0]
D=A
@ARG
A=M
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
@LCL   //[return]
D=M
@endFrame
M=D
@endFrame
D=M
@5
D=D-A
A=D
D=M
@retAddr
M=D
@SP
A=M
A=A-1
D=M
@SP
M=M-1
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@endFrame
D=M
@1
D=D-A
A=D
D=M
@THAT
M=D
@endFrame
D=M
@2
D=D-A
A=D
D=M
@THIS
M=D
@endFrame
D=M
@3
D=D-A
A=D
D=M
@ARG
M=D
@endFrame
D=M
@4
D=D-A
A=D
D=M
@LCL
M=D
@retAddr
A=M
0;JMP
(Main.fibonacci$IF_FALSE)   //[label, IF_FALSE]
@0   //[push, argument, 0]
D=A
@ARG
A=M
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
@2   //[push, constant, 2]
D=A
@SP
A=M
M=D
@SP
M=M+1
@SP   //[sub]
A=M
A=A-1
D=M
@SP
M=M-1
@SP
A=M
A=A-1
M=M-D
@Main.fibonacci$ret.1   //[call, Main.fibonacci, 1]
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.fibonacci
0;JMP
(Main.fibonacci$ret.1)
@0   //[push, argument, 0]
D=A
@ARG
A=M
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
@1   //[push, constant, 1]
D=A
@SP
A=M
M=D
@SP
M=M+1
@SP   //[sub]
A=M
A=A-1
D=M
@SP
M=M-1
@SP
A=M
A=A-1
M=M-D
@Main.fibonacci$ret.2   //[call, Main.fibonacci, 1]
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.fibonacci
0;JMP
(Main.fibonacci$ret.2)
@SP   //[add]
A=M
A=A-1
D=M
@SP
M=M-1
@SP
A=M
A=A-1
M=D+M
@LCL   //[return]
D=M
@endFrame
M=D
@endFrame
D=M
@5
D=D-A
A=D
D=M
@retAddr
M=D
@SP
A=M
A=A-1
D=M
@SP
M=M-1
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@endFrame
D=M
@1
D=D-A
A=D
D=M
@THAT
M=D
@endFrame
D=M
@2
D=D-A
A=D
D=M
@THIS
M=D
@endFrame
D=M
@3
D=D-A
A=D
D=M
@ARG
M=D
@endFrame
D=M
@4
D=D-A
A=D
D=M
@LCL
M=D
@retAddr
A=M
0;JMP
