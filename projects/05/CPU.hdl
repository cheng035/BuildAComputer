// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. 
 
 
 * If the current instruction needs 
 * to write a value to M, the value is placed in outM, 
 * the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. 
 
 * (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    
    //select between ALUout and instruction
    Mux16(a=instruction,b=aluOut,sel=instruction[15],out=regAIn);
    
    //implement A register
    Not(in = instruction[15],out = notOp);
    Or(a=notOp,b=instruction[5],out=loadA);
    ARegister(in = regAIn, load = loadA , out = regAOut, out[0..14]= addressM);
    
   
    
    //implement D register
    And(a=instruction[4],b=instruction[15],out=dLoad);
    DRegister(in = aluOut , load = dLoad , out = regDout);
    
    
    //useMux to select between M instruction and A instruction (select the a bit)
    Mux16(a=regAOut,b=inM,sel=instruction[12] , out=ALUInputB);
    
    //implement the ALU part
    ALU(x= regDout
    ,y=ALUInputB
    ,zx = instruction[11]
    ,nx = instruction[10]
    ,zy=instruction[9]
    ,ny=instruction[8]
    ,f=instruction[7]
    ,no=instruction[6]
    ,out = aluOut
    ,out = outM
    ,zr = aluZr
    ,ng = aluNg);
    
    //implement whether to write to M
    And(a = instruction[3], b = instruction[15], out = writeM);
  //   DFF(in = writeMIn, out = writeM);
    
    //check whether to jump (0 not jump, 1 jump)
    
    	//no jump(just return false)
    
    	// if out>0 jump
    	Or(a = aluZr , b = aluNg, out = lte0);
    	Not(in = lte0, out = jout1);
    
    	// if out = 0 jump,just return aluZr
    
    	//if out >=0 jump
    	Not(in = aluNg, out = jout2);
    
    	//if out <0 jump, return aluNG
    
    	//if out not 0 jump
    	Not(in = aluZr,out=jout3);
    
    	//if out<=0 jump return lte0
    
    	// un conditional jump return true
    	
    	Mux8Way (a= false
    	,b = jout1
    	,c=aluZr
    	,d= jout2
    	,e= aluNg
    	,f = jout3
    	,g = lte0
    	,h=true
    	,sel = instruction[0..2]
    	,out = jumpOut);
    	

    
 	//implement counter
	And(a=jumpOut,b=instruction[15],out=counterLoad);
    PC(in = regAOut , reset = reset , load = counterLoad, inc = true, out[0..14] = pc);
    
     }